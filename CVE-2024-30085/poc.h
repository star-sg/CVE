#pragma comment(lib, "CldApi.lib") 
#pragma comment(lib,"kernel32.lib")

// General struct definitions
typedef struct _CLIENT_ID {
	HANDLE UniqueProcess;
	HANDLE UniqueThread;
} CLIENT_ID;

typedef struct _LSA_UNICODE_STRING {
	USHORT Length;
	USHORT MaximumLength;
	PWSTR  Buffer;
} LSA_UNICODE_STRING, * PLSA_UNICODE_STRING, UNICODE_STRING, * PUNICODE_STRING;

typedef struct _IO_STATUS_BLOCK {
	union {
		NTSTATUS Status;
		PVOID    Pointer;
	};
	ULONG_PTR Information;
} IO_STATUS_BLOCK, * PIO_STATUS_BLOCK;

typedef struct _OBJECT_ATTRIBUTES {
	ULONG           Length;
	HANDLE          RootDirectory;
	PUNICODE_STRING ObjectName;
	ULONG           Attributes;
	PVOID           SecurityDescriptor;
	PVOID           SecurityQualityOfService;
} OBJECT_ATTRIBUTES, * POBJECT_ATTRIBUTES;

#define InitializeObjectAttributes(p, n, a, r, s) \
{ \
	(p)->Length = sizeof(OBJECT_ATTRIBUTES); \
	(p)->RootDirectory = r; \
	(p)->Attributes = a; \
	(p)->ObjectName = n; \
	(p)->SecurityDescriptor = s; \
	(p)->SecurityQualityOfService = NULL; \
}

// General function definitions
typedef NTSTATUS (__stdcall *fpRtlDecompressBuffer)(USHORT, PUCHAR, ULONG, PUCHAR, ULONG, PULONG);
typedef NTSTATUS (__stdcall *fpRtlCompressBuffer)(USHORT, PUCHAR, ULONG, PUCHAR, ULONG, ULONG, PULONG, PVOID);
typedef NTSTATUS (__stdcall *fpRtlGetCompressionWorkSpaceSize)(USHORT, PULONG, PULONG);

typedef NTSTATUS(NTAPI* fpNtFsControlFile)(
    IN HANDLE FileHandle, 
    IN HANDLE Event OPTIONAL, 
    IN PVOID ApcRoutine OPTIONAL, 
    IN PVOID ApcContext OPTIONAL, 
    OUT PIO_STATUS_BLOCK IoStatusBlock, 
    IN ULONG FsControlCode, 
    IN PVOID InputBuffer OPTIONAL, 
    IN ULONG InputBufferLength, 
    OUT PVOID OutputBuffer OPTIONAL, 
    IN ULONG OutputBufferLength
);

// WNF Stuff
// https://www.cnblogs.com/feizianquan/p/16089929.html
typedef struct _WNF_STATE_NAME {
    ULONG Data[2];
} WNF_STATE_NAME, *PWNF_STATE_NAME;

typedef enum _WNF_STATE_NAME_LIFETIME {
    WnfWellKnownStateName,
    WnfPermanentStateName,
    WnfPersistentStateName,
    WnfTemporaryStateName
} WNF_STATE_NAME_LIFETIME;

typedef enum _WNF_DATA_SCOPE {
    WnfDataScopeSystem,
    WnfDataScopeSession,
    WnfDataScopeUser,
    WnfDataScopeProcess,
    WnfDataScopeMachine
} WNF_DATA_SCOPE;

typedef struct _WNF_TYPE_ID{
    GUID TypeId;
} WNF_TYPE_ID, *PWNF_TYPE_ID;

typedef const WNF_TYPE_ID *PCWNF_TYPE_ID;

typedef NTSTATUS (NTAPI * fpNtCreateWnfStateName)(
    _Out_ PWNF_STATE_NAME StateName,
    _In_ WNF_STATE_NAME_LIFETIME NameLifetime,
    _In_ WNF_DATA_SCOPE DataScope,
    _In_ BOOLEAN PersistData,
    _In_opt_ PCWNF_TYPE_ID TypeId,
    _In_ ULONG MaximumStateSize,
    _In_ PSECURITY_DESCRIPTOR SecurityDescriptor
);

typedef ULONG WNF_CHANGE_STAMP, *PWNF_CHANGE_STAMP;

typedef NTSTATUS (NTAPI * fpNtUpdateWnfStateData)(
    _In_ PWNF_STATE_NAME StateName,
    _In_reads_bytes_opt_(Length) const VOID * Buffer,
    _In_opt_ ULONG Length,
    _In_opt_ PCWNF_TYPE_ID TypeId,
    _In_opt_ const PVOID ExplicitScope,
    _In_ WNF_CHANGE_STAMP MatchingChangeStamp,
    _In_ ULONG CheckStamp
);

typedef NTSTATUS (NTAPI * fpNtQueryWnfStateData)(
    _In_ PWNF_STATE_NAME StateName,
    _In_opt_ PWNF_TYPE_ID TypeId,
    _In_opt_ const VOID * ExplicitScope,
    _Out_ PWNF_CHANGE_STAMP ChangeStamp,
    _Out_writes_bytes_to_opt_(*BufferSize, *BufferSize) PVOID Buffer,
    _Inout_ PULONG BufferSize
);

typedef struct _WNF_STATE_NAME_REGISTRATION {
    PVOID64 MaxStateSize;
    PVOID64  TypeId;
    PVOID64 SecurityDescriptor;
} WNF_STATE_NAME_REGISTRATION, *PWNF_STATE_NAME_REGISTRATION;

typedef NTSTATUS (NTAPI * fpNtDeleteWnfStateData) (
    _In_ PWNF_STATE_NAME StateName,
    _In_opt_ const VOID *ExplicitScope
);

typedef NTSTATUS (NTAPI * fpNtDeleteWnfStateName)(_In_ PWNF_STATE_NAME StateName);

// ALPC Stuff
// https://github.com/Nassim-Asrir/CVE-2023-36424
#define MAX_MSG_LEN 0x500
#define ALPC_MSGFLG_NONE 0x0

typedef struct _ALPC_PORT_ATTRIBUTES {
	unsigned long Flags;
	SECURITY_QUALITY_OF_SERVICE SecurityQos;
	unsigned __int64 MaxMessageLength;
	unsigned __int64 MemoryBandwidth;
	unsigned __int64 MaxPoolUsage;
	unsigned __int64 MaxSectionSize;
	unsigned __int64 MaxViewSize;
	unsigned __int64 MaxTotalSectionSize;
	ULONG DupObjectTypes;
#ifdef _WIN64
	ULONG Reserved;
#endif
} ALPC_PORT_ATTRIBUTES, * PALPC_PORT_ATTRIBUTES;

typedef struct _ALPC_MESSAGE_ATTRIBUTES {
	ULONG AllocatedAttributes;
	ULONG ValidAttributes;
} ALPC_MESSAGE_ATTRIBUTES, * PALPC_MESSAGE_ATTRIBUTES;

typedef struct _PORT_MESSAGE {
	union {
		struct {
			USHORT DataLength;
			USHORT TotalLength;
		} s1;
		ULONG Length;
	} u1;
	union {
		struct {
			USHORT Type;
			USHORT DataInfoOffset;
		} s2;
		ULONG ZeroInit;
	} u2;
	union {
		CLIENT_ID ClientId;
		double DoNotUseThisField;
	};
	ULONG MessageId;
	union {
		SIZE_T ClientViewSize; // only valid for LPC_CONNECTION_REQUEST messages
		ULONG CallbackId; // only valid for LPC_REQUEST messages
	};
} PORT_MESSAGE, * PPORT_MESSAGE;

typedef struct _ALPC_MESSAGE {
	PORT_MESSAGE PortHeader;
	BYTE PortMessage[1000]; // Hard limit for this is 65488. An Error is thrown if AlpcMaxAllowedMessageLength() is exceeded
} ALPC_MESSAGE, * PALPC_MESSAGE;

typedef struct _KALPC_MESSAGE {
	struct _LIST_ENTRY Entry;                                               //0x0
	struct _ALPC_PORT* PortQueue;                                           //0x10
	struct _ALPC_PORT* OwnerPort;                                           //0x18
	struct _ETHREAD* WaitingThread;                                         //0x20
	union {
		struct {
			ULONG QueueType : 3;                                              //0x28
			ULONG QueuePortType : 4;                                          //0x28
			ULONG Canceled : 1;                                               //0x28
			ULONG Ready : 1;                                                  //0x28
			ULONG ReleaseMessage : 1;                                         //0x28
			ULONG SharedQuota : 1;                                            //0x28
			ULONG ReplyWaitReply : 1;                                         //0x28
			ULONG OwnerPortReference : 1;                                     //0x28
			ULONG ReceiverReference : 1;                                      //0x28
			ULONG ViewAttributeRetrieved : 1;                                 //0x28
			ULONG ViewAttributeDeleteOnRelease : 1;                           //0x28
			ULONG InDispatch : 1;                                             //0x28
			ULONG InCanceledQueue : 1;                                        //0x28
		} s1;                                                               //0x28
		ULONG State;                                                        //0x28
	} u1;                                                                   //0x28
	LONG SequenceNo;                                                        //0x2c
	union {
		struct _EPROCESS* QuotaProcess;                                     //0x30
		VOID* QuotaBlock;                                                   //0x30
	};
	struct _ALPC_PORT* CancelSequencePort;                                  //0x38
	struct _ALPC_PORT* CancelQueuePort;                                     //0x40
	LONG CancelSequenceNo;                                                  //0x48
	struct _LIST_ENTRY CancelListEntry;                                     //0x50
	struct _KALPC_RESERVE* Reserve;                                         //0x60
	BYTE MessageAttributesStub[0x48];                                       //0x68
	VOID* DataUserVa;                                                       //0xb0
	struct _ALPC_COMMUNICATION_INFO* CommunicationInfo;                     //0xb8
	struct _ALPC_PORT* ConnectionPort;                                      //0xc0
	struct _ETHREAD* ServerThread;                                          //0xc8
	VOID* WakeReference;                                                    //0xd0
	VOID* WakeReference2;                                                   //0xd8
	VOID* ExtensionBuffer;                                                  //0xe0
	ULONGLONG ExtensionBufferSize;                                          //0xe8
	struct _PORT_MESSAGE PortMessage;                                       //0xf0
} KALPC_MESSAGE;

typedef struct _KALPC_RESERVE {
	struct _ALPC_PORT* OwnerPort;											//0x0
	struct _ALPC_HANDLE_TABLE* HandleTable;									//0x8
	VOID* Handle;															//0x10
	struct _KALPC_MESSAGE* Message;											//0x18
	ULONGLONG Size;															//0x20
	LONG Active;															//0x28
} KALPC_RESERVE;

typedef NTSTATUS (NTAPI * fpNtAlpcCreatePort)(
	_Out_ PHANDLE PortHandle,
	_In_ POBJECT_ATTRIBUTES ObjectAttributes,
	_In_opt_ PALPC_PORT_ATTRIBUTES PortAttributes
);

typedef NTSTATUS (NTAPI * fpNtAlpcCreateResourceReserve)(
	_In_ HANDLE PortHandle,
	_Reserved_ ULONG Flags,
	_In_ SIZE_T MessageSize,
	_Out_ PHANDLE ResourceId
);

typedef NTSTATUS (NTAPI * fpNtAlpcSendWaitReceivePort)(
	_In_ HANDLE  							PortHandle,
	_In_ ULONG  							Flags,
	_Inout_opt_ PPORT_MESSAGE  				SendMessage,
	_Inout_opt_ PALPC_MESSAGE_ATTRIBUTES  	SendMessageAttributes,
	_Inout_opt_ PPORT_MESSAGE               ReceiveMessage,
	_Inout_opt_ PSIZE_T  					BufferLength,
	_Inout_opt_ PALPC_MESSAGE_ATTRIBUTES  	ReceiveMessageAttributes,
	_In_opt_ PLARGE_INTEGER  				Timeout
);

